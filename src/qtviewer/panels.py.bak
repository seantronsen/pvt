from PySide6.QtCore import QTimer
from numpy.typing import NDArray
from pyqtgraph import GraphicsLayoutWidget, LayoutWidget, PlotDataItem
from qtviewer.state import State
from qtviewer.widgets import StatefulWidget
from typing import Callable, Dict, List, Optional
import numpy as np
from qtviewer.decorators import performance_log
import pyqtgraph as pg


class StatefulPane(LayoutWidget):
    """
    A simple pane/panel class that holds some state used for event handling /
    processing. The intended design has it such that this class acts as a base
    for more specific implementations to derive from. Pane-level layouts are
    created vertically merely for simplicity as it allows for the maximum
    possible viewport for data analysis. Override the methods related to layout
    if different behavior is desired.

    IMPORTANT: Data immutability is a property that should be abided by when
    defining callback functions. That is, the callback function should either
    return new or a modified copy of the original data. Failing to abide by
    this suggestion will require users to restart the application in order to
    re-obtain the initial state of the image later mutated by the callback.
    Specifically, the scope of this class and all derivations does not include
    managing the state of your data. It only includes management of the state
    of tuning parameters.

    IMPORTANT: For most intents and purposes, you will want to attach control
    widgets to the main application window and not to an instance of a display
    pane directly. Doing such allows a common state to be shared among all data
    display panes which allows for a state change within a control widget to
    affect all related data display panes (i.e. no need for duplicate control
    widgets).
    """

    __state: State
    callback: Callable
    timer: Optional[QTimer]
    timer_ptr: np.uintp

    def __init__(
        self,
        data,
        callback: Optional[Callable] = None,
        fps: Optional[float] = None,
        **_,
    ) -> None:
        self.callback = callback if callback is not None else lambda **_: data
        super().__init__()
        update_func = self.update

        self.__state = State(self.update)
        if fps is not None:
            assert not fps < 0
            interval = int(0 if fps == 0 else 1000 / fps)
            self.timer_ptr = np.uintp(0)
            self.timer = QTimer()
            self.timer.timeout.connect(self.__timer_timeout)
            # TODO: MAKE A MORE PRACTICAL METHOD SOON.
            old = update_func
            update_func = lambda **kwargs: old(timer_ptr=self.timer_ptr, **kwargs)
            self.timer.start(interval)
        self.__state = State(update_func)

    def __timer_timeout(self):
        """
        Exists to provide a timed update feature for animation / sequence data
        where new frames should be delivered at the specified interval.
        """
        self.timer_ptr += np.uintp(1)
        self.force_flush()

    @performance_log
    def update(self, **kwargs):
        """
        This function is the callback provided to the State instance and is
        executed on each state change. The user specified callback is executed
        by this callback. If you wish to exist in user land, don't worry about
        anything other than the one callback you're required to define.
        """
        data = self.callback(**kwargs)
        self.set_data(data)


    def set_data(self, *args):
        """
        IMPORTANT: A parent method which will fail if not overridden/shadowed.

        :raises [TODO:name]: [TODO:description]
        """
        raise NotImplementedError

    def force_flush(self):
        """
        more so here for possible future convenience. don't really have a use
        for this right now... maybe debugging later? depends on the obnoxious
        level of inheritance object oriented programming can aspire to.

        """
        self.__state.flush()

    def enchain(self, widget: StatefulWidget):
        """
        Bond a stateful widget with the pane state such that updates to this control
        widget will affect the pane when configured properly. Ensure proper
        configuration by naming a variable in the user specified call back
        function with the key value for the widget state component.

        :param widget: [TODO:description]
        """

        widget.attach(self.__state)

    def attach_widget(self, widget: StatefulWidget):
        """
        Enchain the pane state with the specified widget and position it
        beneath the main feature pane. Use this method when a control widget
        should be directly associated with a specific data display pane.

        :param widget: [TODO:description]
        """
        self.enchain(widget)
        self.addWidget(widget)
        self.nextRow()



class Animator:
    wrapped_pane: StatefulPane
    timer: Optional[QTimer]
    timer_ptr: np.uintp

    def __init__(
        self,
        fps: float,
        **_,
    ) -> None:
        super().__init__()

        self.__state = State(self.update)
        if fps is not None:
            assert not fps < 0
            interval = int(0 if fps == 0 else 1000 / fps)
            self.timer_ptr = np.uintp(0)
            self.timer = QTimer()
            self.timer.timeout.connect(self.__timer_timeout)
            # TODO: MAKE A MORE PRACTICAL METHOD SOON.
            old = update_func
            self.timer.start(interval)
        self.__state = State(update_func)

    def __timer_timeout(self):
        """
        Exists to provide a timed update feature for animation / sequence data
        where new frames should be delivered at the specified interval.
        """
        self.timer_ptr += np.uintp(1)
        self.wrapped_pane.force_flush()

    def update(self, **kwargs):
        """
        This function is the callback provided to the State instance and is
        executed on each state change. The user specified callback is executed
        by this callback. If you wish to exist in user land, don't worry about
        anything other than the one callback you're required to define.
        """

        update_func = lambda **kwargs: old(timer_ptr=self.timer_ptr, **kwargs)

        data = self.wrapped_pane.callback(**kwargs)
        self.wrapped_pane.set_data(data)
